rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helpers
    function isSignedIn() {
      return request.auth != null;
    }

    // Bypass total para administradores (custom claim: admin=true)
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    // Confere se o usuário logado é o professor dono da disciplina
    function isProfessorDaDisciplina(discId) {
      return exists(/databases/$(database)/documents/disciplinas/$(discId)) &&
             get(/databases/$(database)/documents/disciplinas/$(discId)).data.professorId == request.auth.uid;
    }

    /* ===========================
       USUÁRIOS (perfil do app)
       /usuarios/{userId}
       =========================== */
    match /usuarios/{userId} {
      // Admin pode tudo; usuário comum só no próprio doc
      allow read, write: if isAdmin() || (isSignedIn() && request.auth.uid == userId);
    }

    /* ===========================
   COUNTERS (sequenciamento)
   /counters/{counterId}
   =========================== */
    match /counters/{counterId} {
      // leitura e escrita apenas para usuários autenticados (ou admin)
      allow read: if isAdmin() || isSignedIn();
      // se quiser, pode restringir a escrita só ao doc "alunos"
      allow write: if isAdmin() || (isSignedIn() && counterId == "alunos");
    }


    /* ===========================
       DISCIPLINAS
       /disciplinas/{disciplinaId}
       =========================== */
    match /disciplinas/{disciplinaId} {
      // Qualquer autenticado pode ler
      allow read: if isSignedIn();

      // CREATE: usa request.resource (doc ainda não existe)
      allow create: if isAdmin() ||
        (isSignedIn() &&
         request.resource.data.professorId == request.auth.uid);

      // UPDATE/DELETE: usa resource (doc existente)
      allow update, delete: if isAdmin() ||
        (isSignedIn() &&
         resource.data.professorId == request.auth.uid);
    }

    /* ===========================
       ALUNOS
       /alunos/{alunoId}
       (Você pode apertar depois; por ora qualquer autenticado)
       =========================== */
    match /alunos/{alunoId} {
      allow read, write: if isAdmin() || isSignedIn();
    }


    /* ===========================
       TIPOS DE AVALIAÇÃO
       /tiposAvaliacao/{tipoId}
       =========================== */
    match /tiposAvaliacao/{tipoId} {
      // Leitura liberada para autenticados
      allow read: if isAdmin() || isSignedIn();

      // CREATE: professor da disciplina (ou admin)
      allow create: if isAdmin() ||
        (isSignedIn() &&
         request.resource.data.disciplinaId is string &&
         isProfessorDaDisciplina(request.resource.data.disciplinaId));

      // UPDATE/DELETE: professor dono (ou admin)
      allow update, delete: if isAdmin() ||
        (isSignedIn() &&
         resource.data.disciplinaId is string &&
         isProfessorDaDisciplina(resource.data.disciplinaId));
    }

    /* ===========================
       MATRÍCULAS
       /matriculas/{matriculaId}
       (Simples; pode apertar depois)
       =========================== */
    match /matriculas/{matriculaId} {
      allow read, write: if isAdmin() || isSignedIn();
    }

    /* ===========================
       NOTAS
       /notas/{notaId}
       (Simples; pode apertar depois)
       =========================== */
    match /notas/{notaId} {
      allow read, write: if isAdmin() || isSignedIn();
    }
  }
}

